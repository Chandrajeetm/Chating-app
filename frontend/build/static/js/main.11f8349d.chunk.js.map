{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","window","location","reload","spacing","id","isRequired","className","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","pr","fontSize","fontFamily","class","w","isFitted","mb","_selected","color","bgColor","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","d","base","icon","View","isCentered","justifyContent","flexDir","alignItems","borderRadius","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","bg","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","borderWidth","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11f8349d.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../../App.css\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n\r\n      return;\r\n    }\r\n\r\n    // console.log(email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    window.location.reload();\r\n\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel className=\"form-label\">Email Address</FormLabel>\r\n        <Input\r\n          className=\"Input\"\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel className=\"form-label\">Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            className=\"Input\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"../../App.css\";\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // data.append(\"upload_preset\", \"mychat_app\");\r\n    // data.append(\"cloud_name\", \"duu6dr6ht\");\r\n    // fetch(\"https://api.cloudinary.com/v1_1/duu6dr6ht/image/upload\",\r\n\r\n\r\n\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"mychat_app\");\r\n      data.append(\"cloud_name\", \"duu6dr6ht\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/duu6dr6ht/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel className=\"form-label\">Name</FormLabel>\r\n        <Input\r\n          className=\"Input\"\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel className=\"form-label\">Email Address</FormLabel>\r\n        <Input\r\n          className=\"Input\"\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel className=\"form-label\">Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            className=\"Input\"\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel className=\"form-label\">Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            className=\"Input\"\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel className=\"form-label\">Upload your Picture</FormLabel>\r\n        <Input\r\n          className=\"Input\"\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\nimport \"../App.css\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        id=\"talk-box\"\r\n        pr={2}\r\n      >\r\n        <Box className=\"talk-div\">\r\n          <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n            <i style={{ \"margin-right\": \"10px\" }} class=\"fa-brands fa-rocketchat\"></i>\r\n            TALK <span style={{ \"color\": \"#bfbfaa\" }}>-AIR</span>\r\n\r\n\r\n          </Text>\r\n        </Box>\r\n\r\n      </Box>\r\n      <Box\r\n        id=\"login-signup\"\r\n        w=\"100%\"\r\n        p={4}>\r\n\r\n        <Tabs isFitted variant=\"unstyled\" >\r\n          <TabList mb=\"1em\">\r\n            <Tab _selected={{ color: 'white', bgColor: '#dbcaca69' }} >Login</Tab>\r\n            <Tab _selected={{ color: 'white', bgColor: '#dbcaca69' }}>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container >\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  // const { user } = ChatState();\r\n  // const user = ChatState.user;\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  // console.log(user);\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      // console.log(data[0]);\r\n      setSearchResult(data);\r\n      console.log(\"hello\")\r\n      // console.log(searchResult);\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id))\r\n\r\n        setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n  // console.log(searchResult);\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          <i style={{ \"margin-right\": \"7px\" }} class=\"fa-brands fa-rocketchat\"></i>Talk-Air\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (<ChatLoading />) : (\r\n\r\n              searchResult?.map((user) => (\r\n\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"0px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}